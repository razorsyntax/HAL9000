var NeuralNetwork=function(a){this.name=a||"NN",this.layers={inputLayer:{},hiddenLayer:[],outputLayer:[]},this.targets=[]};NeuralNetwork.prototype.createLayer=function(){var a=arguments[0],b=arguments[1];"number"!=typeof a&&(b=arguments[0],a=1);try{a="output"===b.type?1:a}catch(a){return alert("Please provide an attribute type when creating layers: output or hidden"),!1}for(let c=0;c<a;c++)switch(b.type){case"hidden":var d,e=this.layers.hiddenLayer.length;if(d=e<1?"A":utilities.toLetters(e+1),b.neurons.length>0)for(let a=0;a<b.neurons.length;a++)b.neurons[a].id=d+(a+1).toString();this.layers.hiddenLayer.push({name:b.name||"",layerID:d,type:b.type,neurons:b.neurons});break;case"output":for(let a=0;a<b.neurons.length;a++)b.neurons[a].id="Output_"+(a+1);return void(this.layers.outputLayer={type:b.type,neurons:b.neurons});default:return alert("Please specify layer type: 'output' or 'hidden'"),!1}},NeuralNetwork.prototype.setTarget=function(a){this.targets=a},NeuralNetwork.prototype.init=function(a){var c=this.layers.hiddenLayer,d=this.layers.outputLayer,e=this.layers.inputLayer,f=[];e.inputs=a;for(let g=0;g<c.length;g++)for(let b=0;b<c[g].neurons.length;b++)f=randomValues(a),c[g].neurons[b].wb={w:f,b:NeuralMathLib.randomGauss()};var h=c.length,i=c[h-1].neurons.length;for(let g=0;g<d.neurons.length;g++)f=randomValues(i),d.neurons[g].wb={w:f,b:NeuralMathLib.randomGauss()}},NeuralNetwork.prototype.errors=function(a,b,c){this.globalError=a,this.globalFinal=b,this.predictionArray=c};var Train=function(a,b,c,d,e){var f=[],g=[];"number"!=typeof d&&(d=1),e===!0&&e===!1||(e=!0);for(let h=0;h<d;h++){var j=[],k=[],l=[];for(let d=0;d<a.layers.hiddenLayer.length;d++){var r=a.layers.hiddenLayer[d].neurons,s=NeuralMathLib.activatedLayer(r,b,"hidden");k.push(s.activated),l.push(s)}lastLayerInputs=k[k.length-1];var t=a.layers.outputLayer.neurons,u=NeuralMathLib.activatedLayer(t,lastLayerInputs,"output");j=u.activated;var v=LossFunction(j,a.targets),w=v.reduce(function(a,b,c,d){return a+b});e&&(g.push(w),f.push(j._data),a.errors(g,w,f));var x=NeuralMathLib.FinalOutputWeightCalcs(j,lastLayerInputs,c,a),a=(x.outputWBs,x.finalDeltaArr,x.NN),A=x.newOutputWeightArr,B=x.errorOutput,C=x.sig,D=[];for(let d=0;d<a.layers.outputLayer.neurons.length;d++)D.push(utilities.returnArray(a.layers.outputLayer.neurons[d].wb.w));for(let d=0;d<A._data.length;d++)a.layers.outputLayer.neurons[d].wb.w=A._data[d];var E=utilities.returnArray(a.layers.hiddenLayer),F=E.reverse();for(let h=0;h<F.length;h++){var G=[],H=[];for(let d=0;d<B._data.length;d++){for(let a=0;a<D[d].length;a++)G.push(B._data[d]*C._data[d]*D[d][a]);H.push(math.matrix(G)),G=[]}var I=math.zeros(H[0]._data.length);for(let d=0;d<H.length;d++)I=math.add(I,H[d]);var J=Derivatives.dSig(s.activated._data);b=0===h?b:lastLayerInputs._data;var K=[];for(let d=0;d<b.length;d++)K.push(I._data[d]*J._data[d]*b[d]);var L=[],M=[];for(let d=0;d<b.length;d++){for(let a=0;a<F[h].neurons.length;a++)L.push(F[h].neurons[d].wb.w[a]-c*K[d]);M.push(L),L=[]}a.layers.hiddenLayer[h]=UpdateWeights(math.matrix(M),F[h])}}},StopLearning=function(){return!1},Neuron=function(a){this.activation=a.activation||"logsig",this.id=""};Neuron.prototype.update=function(a){this.obj=a||this.obj};var NeuronArray=function(a,b){var c=[];a=a||0,b=b||"logsig";for(var d=0;d<a;d++)c.push(new Neuron({activation:b}));return c},utilities={nextLetter:function(a){var b=utilities.toNumbers(a),c=b+1;return utilities.toLetters(c)},lastLetter:function(a){var b=utilities.toNumbers(a),c=b-1,d=utilities.toLetters(c);return d},toLetters:function(a){"use strict";var b=a%26,c=a/26|0,d=b?String.fromCharCode(64+b):(c--,"Z");return c?utilities.toLetters(c)+d:d},toNumbers:function(a){"use strict";var b,c=0;try{b=a.length}catch(a){b=0}for(var d=b;(d-=1)>-1;)c+=(a.charCodeAt(d)-64)*Math.pow(26,b-1-d);return c},returnArray:function(a){var b=[];for(let c=0;c<a.length;c++)b.push(a[c]);return b}},NeuralMathLib={activations:function(a,b){var c=b;switch(a.activation){case"logsig":return 1/(1+Math.exp(-c));case"tanh":var d=Math.exp(c),e=Math.exp(-c);return(d-e)/(d+e);case"linear":return b;case"satlin":if(b<0)return 0;if(b>=0&&b<=1)return b;if(b>1)return 1;case"arctan":return Math.atan(c);case"gaussian":return Math.exp(-Math.pow(c,2))}},activatedLayer:function(a,b,c){"use strict";var d,e,f,g,h,i=[],j=[];for(let h=0;h<a.length;h++){switch(d=a[h].id,c){case"hidden":e=a.filter(function(a){return a.id===d});break;case"output":e=a.filter(function(a){return a.id==="Output_"+(h+1)})}f=NeuralMathLib.summation(a[h].wb,b),i.push(f),g=NeuralMathLib.activations(e[0],f),j.push(g)}return{activated:math.matrix(j),sums:math.matrix(i)}},FinalOutputWeightCalcs:function(a,b,c,d){var e=[],g=[],h=utilities.returnArray(d.layers.outputLayer.neurons);for(let i=0;i<h.length;i++)e.push(h[i].wb.w);var j=Derivatives.dSig(a._data),k=math.subtract(a,math.matrix(d.targets)),l=[];for(let i=0;i<k._data.length;i++)l.push(k._data[i]*j._data[i]);for(let i=0;i<k._data.length;i++)g.push(l[i]*b._data[i]);var m=[],n=[];for(let i=0;i<e.length;i++){for(let a=0;a<e[i].length;a++)m.push(e[i][a]-c*g[i]);n.push(m),m=[]}return{outputWBs:math.matrix(e),finalDeltaArr:g,NN:d,newOutputWeightArr:math.matrix(n),errorOutput:k,sig:j}},summation:function(a,b){var c=a.w,d=a.b,e=math.matrix(b),f=math.matrix(c),g=math.multiply(e,f);return math.add(g,d)},randomGauss:function(){var a,b,c;do a=2*Math.random()-1,b=2*Math.random()-1,c=a*a+b*b;while(c>=1||0==c);var e=Math.sqrt(-2*Math.log(c)/c),f=Math.abs(a*e);return f>1&&(f=1/f),f},eTotal:function(a,b){var c=[];c.push(math.multiply(b,math.matrix(a)));var d=function(a,b){return a+b};return total=c[0]._data.reduce(d),total}},Derivatives={dSig:function(a){var b=[];let c=0;for(;c<a.length;)b.push(a[c]*(1-a[c])),c++;return math.matrix(b)}},LossFunction=function(a,b){b=math.matrix(b);var c=math.subtract(b,a),d=math.square(c),e=math.multiply(d,.5);return e._data},MeanSquaredErr=function(a){var b=a._data.reduce(function(a,b,c,d){return a+.5*b});return b/a.length*100},UpdateWeights=function(a,b){var f=b;for(let g=0;g<f.neurons.length;g++)f.neurons[g].wb.w=a._data[g];return f},randomValues=function(a){var c,b=[];c="number"==typeof a?a:a.length;for(let d=0;d<c;d++)b.push(NeuralMathLib.randomGauss());return b};